#!/bin/bash
#
# Hemera - Intelligent System (https://sourceforge.net/projects/hemerais)
# Copyright (C) 2010-2011 Bertrand Benoit <projettwk@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses
# or write to the Free Software Foundation,Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301  USA
#
# Version: 1.0
# Description: mode command.
# Keyword: MODE_CMD
#
# This script must NOT be directly called.

# usage: modeToActivate <mode> <input path>
function modeToActivate() {
  local _mode="$1" _inputPath="$2"

  # Generates an input for informing of the update of the mode.
  speechToSay "$MODE_CMD_UPDATE_I18N $_mode" "$_inputPath"

  # Generates an input for updating the mode.
  echo "$_mode" > "$h_newInputDir/mode_"$( basename "$_inputPath" )".txt"
}

# Ensures there is at least but no more than one argument.
if [ $wordsCount -ne 2 ]; then
  speechToSay "$MODE_CMD_BAD_USE_I18N" "$_inputPath"
  notifyErrInput
else
  writeMessage "$inputString: MODE command detected -> checking requested mode"

  # Gets the requested mode and ensures it is a supported one.
  requestedMode=$( extractRecognitionResultArgumentN "$_inputPath" 2 )
  if ! checkAvailableValue "${HEMERA_SUPPORTED_MODES_I18N[*]}" "$requestedMode"; then
    badMode="$requestedMode"
    supportedMode=$( echo "${HEMERA_SUPPORTED_MODES_I18N[*]}" |sed -e 's/[ ]/; /g;' )
    speechToSay "$( eval echo "$MODE_CMD_BAD_MODE_I18N" )" "$_inputPath"
    notifyErrInput
  else
    # Generates a new input defining the mode -> it is important that existing new/current input are managed before this mode is
    #  activated.
    writeMessage "$inputString: mode $requestedMode supported -> preparing mode update"
    modeToActivate "$requestedMode" "$_inputPath" && notifyDoneInput || notifyErrInput
  fi
fi
