#!/bin/bash
#
# Hemera - Intelligent System (http://hemerais.bertrand-benoit.net)
# Copyright (C) 2010-2015 Bertrand Benoit <hemerais@bertrand-benoit.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses
# or write to the Free Software Foundation,Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301  USA
#
# Version: 1.0
# Description: say command.
# Keyword: SAY_CMD
#
# This script must NOT be directly called.

## Checks configuration specific to this command.
function checkConfig() {
  # Nothing specific to do.
  return 0
}

## Performs a quick test of this command.
function testCommand() {
  # TODO: implement test
  return 0
}

## Instructions - concrete execution of this command.
# usage: checkCoherence <path of the whole input> <words count>
#  <path of the whole input>: contains all the recognized input
#  <words count>: the count of recognized words
# return 0 if coherence if OK, >0 otherwise.
function checkCoherence() {
  local _inputPath="$1" _wordsCount="$2"

  # Ensures there is at least one argument.
  if [ $_wordsCount -lt 2 ]; then
    speechToSay "$SAY_CMD_BAD_USE_I18N" "$_inputPath"
    return 1
  fi

  # All is OK.
  return 0
}

# usage: execute <path of the whole input> <input string presentation>
#  <path of the whole input>: contains all the recognized input
#  <input string presentation>: the string presentation of the input (prefix of message to show)
# return 0 if execution if OK, >0 otherwise.
function execute() {
  local _inputPath="$1" _inputString="$2"

  whatToSay=$( extractRecognitionResultArgument "$_inputPath" )
  writeMessage "$_inputString: SAY command detected -> preparing what to say: $whatToSay"
  speechToSay "$whatToSay" "$_inputPath"
}
