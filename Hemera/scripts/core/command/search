#!/bin/bash
#
# Hemera - Intelligent System
# Copyright (C) 2010-2020 Bertrand Benoit <hemerais@bertrand-benoit.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses
# or write to the Free Software Foundation,Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301  USA
#
# Version: 1.0
# Description: search command.
# Keyword: SEARCH_CMD
#
# This script must NOT be directly called.

## Checks configuration specific to this command.
function checkConfig() {
  checkAndSetConfig "hemera.core.command.general.htmlConverter.path" "$CONFIG_TYPE_BIN"
  export htmlConverter="$h_lastConfig"
  checkAndSetConfig "hemera.core.command.search.url" "$CONFIG_TYPE_OPTION"
  export searchURL="$h_lastConfig"

  # Defines rc file to use.
  export htmlConverterRCFile="$h_coreDir/command/search_definition.mobile.wikipedia.rc"

  # Warns if needed.
  if [[ "$searchURL" =~ ".*mobile.wikipedia.*" ]]; then
    # OK, it is fully supported.
    declare -r nothing="ifHolder" # Only used to avoid error with 'empty if/then'.
  else
    warning "There is currently no full parsing support for source URL '$searchURL' (result may not be good). Contact Hemera team to implement it."
  fi

  return 0
}

## Performs a quick test of this command.
function testCommand() {
  # TODO: implement test
  return 0
}

## Instructions - concrete execution of this command.
# usage: checkCoherence <path of the whole input> <words count>
#  <path of the whole input>: contains all the recognized input
#  <words count>: the count of recognized words
# return 0 if coherence if OK, >0 otherwise.
function checkCoherence() {
  local _inputPath="$1" _wordsCount="$2"

  # Ensures there is at least one argument.
  if [ $_wordsCount -lt 2 ]; then
    speechToSay "$SEARCH_CMD_BAD_USE_I18N" "$_inputPath"
    return 1
  fi

  # All is OK.
  return 0
}

## Instructions - concrete execution of this command.
# usage: parseHTML <source URL> <source file> <destination file>
function parseHTML() {
  local _srcURL="$1" _srcfile="$2" _destFile="$3"
  local _tmpFile="$_srcfile.pruned"

  # Removes lots of things (VERY IMPORTANT: one-line substitution MUST be done before multi-line substituion to avoid bad positive):
  #  - any kind of thumb image -> div with class="thumbcaption" or class="thumbinner"
  #  - any part ('Bandeau' in French) requesting collaboration for definition
  #  - homonymy part (same line + multi line) ('homonymie' in French, 'disambiguation' in English)
  #  - See also part (same line + multi line)
  #  - language selector
  #  - any form (e.g. search)
  #  - any single image (e.g. <img ... Logo />)
  #  - any button (e.g. show/hidden)
  #  - any reference (e.g. <sup ...>[1]...</sup>) / one version with </span>, one without
  #  - any Navigation Head/Content (when one article links to several others)
  #  - any table
  #  - any remaining <tr> and <td> tags (can happen if there is nested <table>/</table>).
  #  - cut after 'footer'
  cat "$_srcfile" | sed \
    -e '/<div[ ]*class="thumbcaption"[^>]*>/,/<\/div>/d;/<div[ ]*class="thumbinner"[^>]*>/,/<\/div>/d;' \
    -e '/<table[^>]*><tr><td[^>]*class="bandeau-icone">/,/<\/table>/d;' \
    -e 's/<div[^>]*class="homonym.*"[^>]*>.*>[^<]*[Hh]omonym.*<\/a>[^<]*<\/div>//g;/<div[^>]*class="homonym.*"[^>]*>/,/<\/div>/d;' \
    -e 's/<div[^>]*class="dablink"[^>]*>.*>[^<]*[Dd]isambiguation.*<\/a>[^<]*<\/div>//g;/<div[ ]*class="dablink"[^>]*>/,/<\/div>/d;' \
    -e 's/<div[^>]*class="[^"]*seealso"[^>]*>See also.*<\/a>[^<]*<\/div>//g;/<div[^>]*class="[^"]*seealso"[^>]*>/,/<\/div>/d;' \
    -e '/<div[ ]*id="languageselectionsection[^>]*>/,/<\/div>/d;' \
    -e '/<form/,/<\/form>/d;' \
    -e 's/<img[^>]*\/>//g;' \
    -e 's/<button[^>]*>[^<]*<\/button>//g;' \
    -e 's/<div[^>]*class="section_anchors"[^>]*>[^<]*<a[^>]*>[^<]*<\/a><\/div>//g;' \
    -e 's/<sup[^[]*[[][^]]*[]]<\/span><\/a><\/sup>//g;s/<sup[^[]*[[][^]]*[]]<\/a><\/sup>//g;' \
    -e 's/<div[^>]*class="NavHead"[^>]*>.*<\/div>//g;/<div[^>]*class="NavHead"[^>]*>/,/<\/div>/d;' \
    -e 's/<div[^>]*class="NavContent"[^>]*>.*<\/div>//g;/<div[^>]*class="NavContent"[^>]*>/,/<\/div>/d;' \
    -e 's/<\/table>/<\/table>\n/g;/<table/,/<\/table>/d;' \
    -e 's/<tr[^>]*>.*<\/tr[^>]*>//g;s/<td[^>]*>.*<\/td[^>]*>//g;' \
    -e '/<div id=.footer.>/,//d' \
  > "$_tmpFile"

  # Converts HTML to text, with dedicated rcfile.
  # Then, performs some post processing:
  #  - cut anything since "Reference" part
  #  - removes empty lines
  #  - show at maximum 2 headings, and show only 1 heading, if there is more than N lines.
  echo -n "$SEARCH_CMD_DEF_OF_I18N" > "$_destFile"
  ! "$htmlConverter" -nobs -rcfile "$htmlConverterRCFile" "$_tmpFile" |sed \
    -e '/^@@*R[eé]f[eé]rences/Q' | \
    grep -v "^$" | \
    awk '/@@@*/{head++; printSomething=0}; head >= 3 {exit}; head == 2 && NR >= 8 && !printSomething {exit}; { print $0; printSomething=1 }' | \
    sed -e 's/^@@@*\([^@]*\)$/\1.\n/g;' \
  >> "$_destFile" && errorMessage "Unable to convert HTML of file '$_srcfile'" -1 && return 1
  return 0
}

# usage: execute <path of the whole input> <input string presentation>
#  <path of the whole input>: contains all the recognized input
#  <input string presentation>: the string presentation of the input (prefix of message to show)
# return 0 if execution if OK, >0 otherwise.
function execute() {
  checkConfig || return 1

  local _inputPath="$1" _inputString="$2"

  # Extracts the term to define.
  termsToDefine=$( extractRecognitionResultArgument "$_inputPath" )
  writeMessage "$_inputString: SEARCH command detected -> starting definition search about: $termsToDefine"

  # Gets the corresponding URL.
  input=$( echo "$termsToDefine" |sed -e 's/[ \t]/%20/g;' )
  urlContentsFile="$h_workDir/$h_language-$termsToDefine-DefinitionContents.tmp"
  completeUrl=$( eval echo "$searchURL" )
  if [ ! -s "$urlContentsFile" ]; then
    getURLContents "$completeUrl" "$urlContentsFile" || return $ERROR_EXTERNAL_TOOL
    info "Downloaded '$completeUrl' to '$urlContentsFile'"
  else
    info "Used already downloaded file from '$completeUrl' to '$urlContentsFile'"
  fi

  # Parses HTML.
  parseHTML "$searchURL" "$urlContentsFile" "$urlContentsFile.txt" || return $ERROR_EXTERNAL_TOOL

  # Uses the speech core module to read the produced file.
  h_logFile="$h_logFile" noconsole=${noconsole:-1} "$speechScript" -f "$urlContentsFile.txt" -o "$h_newInputDir/speech_"$( basename "$_inputPath" )".wav"
}
