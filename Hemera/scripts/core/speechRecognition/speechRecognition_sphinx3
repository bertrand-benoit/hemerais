#!/bin/bash
#
# Hemera - Intelligent System (https://github.com/bertrand-benoit/hemerais)
# Copyright (C) 2010-2020 Bertrand Benoit <hemerais@bertrand-benoit.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses
# or write to the Free Software Foundation,Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301  USA
#
# Version: 1.0
# Description: uses sphinx3 to perfom speech recognition.
#
# must NOT be directly called.

[ "$moduleMode" != "sphinx3" ] && exit $ERROR_MODE

## Configuration check.
checkAndSetConfig "$CONFIG_KEY.tool.path" "$CONFIG_TYPE_BIN"
declare -r sphinx3DecoderBin="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.tool.options" "$CONFIG_TYPE_OPTION"
declare -r sphinx3DecoderOptions="$LAST_READ_CONFIG"

declare -r dataDir="$h_tpDir/speechRecognition/data"
checkAndSetConfig "$CONFIG_KEY.sphinx3.lexicalModel.words" "$CONFIG_TYPE_DATA" "$dataDir/models/lexical"
declare -r lexicalModelWords="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.sphinx3.lexicalModel.fillers" "$CONFIG_TYPE_DATA" "$dataDir/models/lexical"
declare -r lexicalModelFillers="$LAST_READ_CONFIG"

checkAndSetConfig "$CONFIG_KEY.sphinx3.languageModel" "$CONFIG_TYPE_DATA" "$dataDir/models/language"
declare -r languageModel="$LAST_READ_CONFIG"

checkAndSetConfig "$CONFIG_KEY.sphinx3.acousticModel.definition" "$CONFIG_TYPE_DATA" "$dataDir/models/acoustic"
declare -r acousticModelDefinition="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.sphinx3.acousticModel.means" "$CONFIG_TYPE_DATA" "$dataDir/models/acoustic"
declare -r acousticModelMeans="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.sphinx3.acousticModel.variances" "$CONFIG_TYPE_DATA" "$dataDir/models/acoustic"
declare -r acousticModelVariances="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.sphinx3.acousticModel.mixtureWeights" "$CONFIG_TYPE_DATA" "$dataDir/models/acoustic"
declare -r acousticModelMixtureWeights="$LAST_READ_CONFIG"
checkAndSetConfig "$CONFIG_KEY.sphinx3.acousticModel.transitionMatrices" "$CONFIG_TYPE_DATA" "$dataDir/models/acoustic"
declare -r acousticModelTransitionMatrices="$LAST_READ_CONFIG"

# usage: prepareAudioSource <source wav file> <destination raw file> <convert>
# convert to raw file: 0=disabled, 1=enabled
function prepareAudioSource() {
  local _wavFile="$1" _rawFile="$2" _convert="$3"

  # Defines feature file path, according to convert.
  local _mfcFile="$_wavFile".mfc
  [ $_convert -eq 1 ] && _mfcFile="$_rawFile".mfc

  # Checks if destination mfc file alreazdy exists, force is NOT set.
  if [[ -f "$_mfcFile" ]] && [[ $force -eq 0 ]]; then
    writeMessage "Found feature sound file '$_mfcFile' (use -F to recreate)."
  else
    # Modus operandi
    local output="$_wavFile"
    if [ $_convert -eq 1 ]; then
      #  1- converts the wav file to signed 16-bit little endian raw file
      writeMessageSL "Converting sound file $_wavFile ... "

      # Defines input and output.
      declare -r input="$_wavFile"
      declare -r output="$_rawFile"

      ! "$soundConverterBin" $( eval echo $soundConverterOptions ) >> "$h_logFile" 2>&1 && echo -e "error" >&2 && return 1
      echo "done"|tee -a "$h_logFile"
    fi

    #  2- computes the corresponding feature file
    writeMessageSL "Creating feature sound file for $input ... "
    ! "$currentDir/computeFeatureFile.sh" -f "$output" >> "$h_logFile" 2>&1 && echo -e "error" >&2 && return 1
    echo "done"|tee -a "$h_logFile"
  fi
  return 0
}

# usage: prepareSoundFileList <source sound list file> <control list file> <convert>
# convert: 0=disabled, 1=enabled
function prepareSoundFileList() {
  local _sourceSoundListFile="$1" _controlFile="$2" _convert="$3"

  # For each sound file of the specified list.
  rm -f "$_controlFile"
  atLeastOneSuccess=0
  for soundFileRaw in $( cat "$_sourceSoundListFile" |sed -e 's/[ \t]/£/g;' ); do
    soundFile=$( echo "$soundFileRaw" |sed 's/£/ /g;' )

    rawSoundFile="$soundFile".raw
    ! prepareAudioSource "$soundFile" "$rawSoundFile" "$_convert" && continue
    atLeastOneSuccess=1
    # Adds the sound file path to the control list, according to the convert toggle.
    [ $_convert -eq 1 ] && echo "$rawSoundFile" >> "$_controlFile" || echo "$soundFile" >> "$_controlFile"
  done

  # At least one audio preparation must have been successful, otherwise exists with error.
  [ $atLeastOneSuccess -eq 0 ] && return 1
  return 0
}

# usage: speechRecognitionFromList <control file> [<result file>]
function speechRecognitionFromList() {
  local _controlFile="$1"
  local _resultFile="$2"

  additionalOptions=""
  [ -n "$_resultFile" ] && additionalOptions="-hyp $_resultFile"

  # Moves to root because all files are regarded as relative to it.
  cd /

  # N.B.: uses MALLOC_CHECK_ to disable malloc error output (some version of sphinx3 are instable).
  # Usually, it happens after result has been shown, so there is no harm to hide.
  MALLOC_CHECK_=0 "$sphinx3DecoderBin" \
    -mdef "$acousticModelDefinition" -mean "$acousticModelMeans" -var "$acousticModelVariances" \
    -mixw "$acousticModelMixtureWeights" -tmat "$acousticModelTransitionMatrices" \
    -lm "$languageModel" -dict "$lexicalModelWords" -fdict "$lexicalModelFillers" \
    $sphinx3DecoderOptions -ctl "$_controlFile" $additionalOptions >> "$h_logFile" 2>&1

    # Parameters information:
    # First test, changed parameters:
    #     -wlen 0.0256   -> default: 0.025625
    #     -lowerf 130    -> default: 133.33334
    #     -upperf 6800   -> default: 6855.4976
    #     -silprob 0.01  -> default: 0.1
    #     -fillprob 0.02 -> default: 0.1

    # Default parameters:
    #     -varnorm no
    #     -cmn current
    #     -feat 1s_c_d_dd
    #     -alpha 0.97
    #     -samprate 16000
    #     -frate 100
    #     -nfft 512
    #     -nfilt 40
    #     -ncep 13
    #     -lw 9.5
}

# usage: analyzeLog
function analyzeLog() {
  local _tmpAnalyzeLog="$h_workDir/$h_fileDate-analyzeLog.tmp"
  local _firstStep=1

  # Performs at least one step, and as much needed until the "log file end" is reached.
  rm -f "$_tmpAnalyzeLog"
  while [[ $_firstStep -eq 1 ]] || [[ $( grep -c "$LOG_FILE_END" "$logToAnalyze" 2>/dev/null ) -eq 0 ]]; do
    sleep 1
    _firstStep=0
    for managedSoundFileRaw in $( grep -re "FWDVIT" "$logToAnalyze" |sed -e 's/^FWDVIT: \([^(]*\)(\([^)]*\))/\2/g;s/[ \t]/£/g;' ); do
      managedSoundFile=$( echo "$managedSoundFileRaw" |sed -e 's/£/ /g' )

      # Checks if the sound file has already been managed.
      [ -f "$_tmpAnalyzeLog" ] && [ $( grep -c "$managedSoundFile" "$_tmpAnalyzeLog" 2>/dev/null ) -gt 0 ] && continue

      # Memorizes it has been shown.
      echo "$managedSoundFile" >> "$_tmpAnalyzeLog"

      # Shows information.
      writeMessage "Managed sound file '$managedSoundFile':"
      grep -re "$managedSoundFile" "$logToAnalyze" |grep -E "FWDVIT|stat.c" |grep -v "SUMMARY" |sed -e 's/^FWDVIT: \([^(]*\)(\([^)]*\))/  Result: \1/g;s/^INFO:[^:]*:.\([^(]*\)(\([^)]*\))/  Stats: \1/g;s/[]];/]\n       /g;'
    done
  done

  writeMessage "Stopped result log analyzer."
}

# usage: analyzeLogStopWait
function analyzeLogStopWait() {
  sleep 2
}
