#!/bin/bash
#
# Hemera - Intelligent System (https://sourceforge.net/projects/hemerais)
# Copyright (C) 2010 Bertrand Benoit <projettwk@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses
# or write to the Free Software Foundation,Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301  USA
#
# Version: 1.0
# Description: uses espeak as a front-end to Mbrola, to perform text to speech.
#
# must NOT be directly called.

[ "$moduleMode" != "espeak+mbrola" ] && exit $ERROR_MODE

## Configuration check.
checkAndSetConfig "$CONFIG_KEY.tool.path" "$CONFIG_TYPE_BIN"
declare -r espeakBin="$h_lastConfig"
checkAndSetConfig "$CONFIG_KEY.tool.options" "$CONFIG_TYPE_OPTION"
declare -r espeakOptions="$h_lastConfig"

# Ensures --pho option is specify if espeak version is >= 1.44
espeakVersion=$( "$espeakBin" --help |grep -v "^$" |head -n 1 |sed -e 's/^[^:]*:[ ]*\([0-9.]*\)[ ].*$/\1/' )
if $( isVersionGreater "$espeakVersion" "1.44.0" ); then
  [ $( echo "$espeakOptions" |grep -wc "\-\-pho" ) -lt 1 ] && errorMessage "Detected version $espeakVersion of espeak which needs --pho option. You should add it to your configuration file ($CONFIG_KEY.tool.options)." $ERROR_SPEECH
fi

checkAndSetConfig "$CONFIG_KEY.mbrola.path" "$CONFIG_TYPE_BIN"
declare -r mbrolaBin="$h_lastConfig"
checkAndSetConfig "$CONFIG_KEY.mbrola.options" "$CONFIG_TYPE_OPTION"
declare -r mbrolaOptions="$h_lastConfig"
checkAndSetConfig "$CONFIG_KEY.mbrola.language" "$CONFIG_TYPE_DATA" "$h_tpDir/speech/data/language"
declare -r mbrolaLanguageFile="$h_lastConfig"

[ "$language" != "$DEFAULT_LANGUAGE" ] && writeMessage "Using default language '$DEFAULT_LANGUAGE' (requested language '$language' is not supported with espeak+mbrola mode)"

# Usage: speechSentence <sentence> [<additional options>]
function speechSentence() {
  local _sentence="$1" _additionalOptions="${2:-}"

  espeakTmpFile="$h_workDir/$h_fileDate"-"espeak.tmp"

  # Modus operandi:
  #  - uses espeak to produce "phoneme mnemonics"
  #  - prefixes each line beginning with a space character (not supported by mbrola) by a ';'; as a comment
  #  - uses mbrola to generate speech sound
  #  - uses finally the speech sound player
  info "System will play speech '$_sentence', using espeak, and mbrola speechOutput=$speechOutput"
  [ "$speechOutput" = "-" ] && speechTmpFile="$h_workDir/$h_fileDate"-"speechFile.wav" || speechTmpFile="$speechOutput"
  LANG=C "$espeakBin" -v "$DEFAULT_LANGUAGE" $espeakOptions $_additionalOptions "$_sentence" > "$espeakTmpFile" 2>&1 || exit $ERROR_SPEECH

  # Ensures there was no error (e.g. espeak exists with status 0 even if there was error with mbrola !).
  [ $( grep -cEi "error|not found|no such" "$espeakTmpFile" ) -gt 0 ] && errorMessage "There was error while using espeak (See $espeakTmpFile)." $ERROR_SPEECH

  # Process espeak output with mbrola.
  sed -e 's/^[ ]/; /g;' "$espeakTmpFile" |"$mbrolaBin" $mbrolaOptions -e "$mbrolaLanguageFile" - "$speechTmpFile" || exit $ERROR_SPEECH
  if [ "$speechOutput" = "-" ]; then
    info "Generated temporary speech file: $speechTmpFile"
    input="$speechTmpFile"
    playerOptions=$( eval echo "$soundPlayerOptions" )
    "$soundPlayerBin" $playerOptions
  else
    writeMessage "Generated speech file: $speechTmpFile"
  fi
}

# Usage: speechFileContents <file path>
function speechFileContents() {
  speechSentence "$1" "-m -f"
}
